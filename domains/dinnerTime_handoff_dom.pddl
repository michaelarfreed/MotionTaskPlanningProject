(define (domain robotics)
  (:requirements :strips :equality  :typing)
  (:types location movable manip pose)
  (:constants door1 door2 door3 door4 door5 door6 door7 door8 door9 door10 - pose
  	      lgripper - manip rgripper - manip)
  (:predicates
	   (At ?obj - movable ?loc - location)
           (RobotAt ?p - pose)
	   (InGripper ?obj - movable ?gripper - manip)
	   (IsAccessPointFor ?p - pose ?targetLocation - location ?gripper - manip)
     (IsAccessPointForTray ?p - pose ?targetLocation - location)
	   (OnTray ?obj - movable )
	   (IsTray ?tray - movable )
	   (Topmost ?obj - movable  ?tray - movable )
	   (Object ?obj - movable)
	   (Smaller ?obj1 - movable  ?obj2 - movable )
	   (On ?obj1 - movable  ?obj2 - movable )
	   (TempArea ?loc - location)
	   (TrayLocation ?loc - location)
	   (empty ?gripper)
	   (InRoom1 ?p - pose)
	   (InRoom2 ?p - pose)
	   (isgp ?p - pose ?obj - movable ?gripper - manip)
     (OnLeft ?p - pose)
     (OnRight ?p - pose)
      (Clear ?l - location)
  )
  
(:functions (total-cost) - number)

 (:action placeOnTray
   :parameters(?lrobot - pose ?obj1 - movable ?obj2 - movable  ?tray - movable  ?trayloc - location  ?gripper - manip)
   :precondition(and (Object ?obj1)
   		     (RobotAt ?lrobot) (IsTray ?tray)
		     (At ?tray ?trayloc)
   		     (IsAccessPointFor ?lrobot ?trayloc ?gripper) (InGripper ?obj1 ?gripper)
		     (Topmost ?obj2 ?tray) 
		     (smaller ?obj1 ?obj2)
		     )
   :effect(and (not (InGripper ?obj1 ?gripper)) (OnTray ?obj1) (on ?obj1 ?obj2)
   	       (not (Topmost ?obj2 ?tray)) (Topmost ?obj1 ?tray) 
	       (empty ?gripper) 
	      )
 )	      

 (:action pickTray
  :parameters(?lrobot  - pose ?tray - movable  ?trayloc - location )
  :precondition(and (RobotAt ?lrobot) (IsTray ?tray)
  		    (empty lgripper) (empty rgripper)
		    (IsAccessPointForTray ?lrobot ?trayloc)
		    (At ?tray ?trayloc)
		    )
  :effect(and (not (At ?tray ?trayloc))
	      (not (empty lgripper)) (not (empty rgripper))
	      (InGripper ?tray lgripper) (InGripper ?tray rgripper)
	 )
 )

 (:action pickFromTray
  :parameters(?lrobot - pose  ?tray ?obj - movable  ?obj2  - movable ?trayloc  - location ?gripper - manip)
  :precondition(and (IsTray ?tray) (Object ?obj)
  		  (RobotAt ?lrobot) (IsAccessPointFor ?lrobot ?trayloc ?gripper)
		  (At ?tray ?trayloc)
		  (Topmost ?obj ?tray) (on ?obj ?obj2)
		  (empty ?gripper)
		  )
  :effect(and (InGripper ?obj ?gripper) (not (ontray ?obj))
  	      (not (Topmost ?obj ?tray)) (not (on ?obj ?obj2))
	      (topmost ?obj2 ?tray) (not (empty ?gripper))
	      )
)

 (:action putDownTray
  :parameters(?lrobot  - pose ?tray  - movable ?ltarget - location )
  :precondition (and (IsTray ?tray) 
  		     (InGripper ?tray lgripper) (InGripper ?tray rgripper) (TrayLocation ?ltarget)
		     (RobotAt ?lrobot) (IsAccessPointForTray ?lrobot ?ltarget)
		     )
  :effect (and (not (InGripper ?tray lgripper)) (not (InGripper ?tray rgripper)) (At ?tray ?ltarget) 
  	        (empty lgripper) (empty rgripper) 
	      )
 )

 (:action putDown
  :parameters(?o1 - movable ?l1 - location  ?l2 - pose ?gripper - manip)
  :precondition (and  (Object ?o1)
  		     (InGripper ?o1 ?gripper) (RobotAt ?l2) (TempArea ?l1)
		     (IsAccessPointFor ?l2 ?l1 ?gripper) (clear ?l1))
  :effect (and (not (InGripper ?o1 ?gripper)) (At ?o1 ?l1) (empty ?gripper)
            (not (clear ?l1))
	      )
 )

  (:action moveto_1_larm_left
     :parameters(?l1  - pose ?l2 - pose ?x)
     :precondition (and (RobotAt ?l1)
     		   	(InRoom1 ?l1) (InRoom1 ?l2)
            (or (IsGP ?l2 ?x lgripper) (IsAccessPointFor ?l2 ?x lgripper))
            (onleft ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2) 
  ))

  (:action moveto_1_larm_right
     :parameters(?l1  - pose ?l2 - pose ?x)
     :precondition (and (RobotAt ?l1)
     		   	(InRoom1 ?l1) (InRoom1 ?l2)
            (or (IsGP ?l2 ?x lgripper) (IsAccessPointFor ?l2 ?x lgripper))
            (onright ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2)
                  (increase (total-cost) 5)
  ))

  (:action moveto_1_rarm_left
     :parameters(?l1  - pose ?l2 - pose ?x)
     :precondition (and (RobotAt ?l1)
     		   	(InRoom1 ?l1) (InRoom1 ?l2)
            (or (IsGP ?l2 ?x rgripper) (IsAccessPointFor ?l2 ?x rgripper))
            (onleft ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2)
                  (increase (total-cost) 5)
  ))

  (:action moveto_1_rarm_right
     :parameters(?l1  - pose ?l2 - pose ?x)
     :precondition (and (RobotAt ?l1)
     		   	(InRoom1 ?l1) (InRoom1 ?l2)
            (or (IsGP ?l2 ?x rgripper) (IsAccessPointFor ?l2 ?x rgripper))
            (onright ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2)
  ))

  (:action moveto_2_larm_left
     :parameters(?l1  - pose ?l2 - pose ?x)
     :precondition (and (RobotAt ?l1)
     		   	(InRoom2 ?l1) (InRoom2 ?l2)
            (or (IsGP ?l2 ?x lgripper) (IsAccessPointFor ?l2 ?x lgripper))
            (onleft ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2) 
  ))

  (:action moveto_2_larm_right
     :parameters(?l1  - pose ?l2 - pose ?x)
     :precondition (and (RobotAt ?l1)
     		   	(InRoom2 ?l1) (InRoom2 ?l2)
            (or (IsGP ?l2 ?x lgripper) (IsAccessPointFor ?l2 ?x lgripper))
            (onright ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2)
                  (increase (total-cost) 5)
  ))

  (:action moveto_2_rarm_left
     :parameters(?l1  - pose ?l2 - pose ?x)
     :precondition (and (RobotAt ?l1)
     		   	(InRoom2 ?l1) (InRoom2 ?l2)
            (or (IsGP ?l2 ?x rgripper) (IsAccessPointFor ?l2 ?x rgripper))
            (onleft ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2)
                  (increase (total-cost) 5)
  ))

  (:action moveto_2_rarm_right
     :parameters(?l1  - pose ?l2 - pose ?x)
     :precondition (and (RobotAt ?l1)
     		   	(InRoom2 ?l1) (InRoom2 ?l2)
            (or (IsGP ?l2 ?x rgripper) (IsAccessPointFor ?l2 ?x rgripper))
            (onright ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2) 
  ))

  (:action moveto_12_larm_left
     :parameters(?l1  - pose ?l2 - pose ?x)
     :precondition (and (RobotAt ?l1)
            (or (IsGP ?l2 ?x lgripper) (IsAccessPointFor ?l2 ?x lgripper))
            (onleft ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2)
                  (increase (total-cost) 10)
  ))

  (:action moveto_12_larm_right
     :parameters(?l1  - pose ?l2 - pose ?x)
     :precondition (and (RobotAt ?l1)
            (or (IsGP ?l2 ?x lgripper) (IsAccessPointFor ?l2 ?x lgripper))
            (onright ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2)
                  (increase (total-cost) 15)
  ))

  (:action moveto_12_rarm_left
     :parameters(?l1  - pose ?l2 - pose ?x)
     :precondition (and (RobotAt ?l1)
            (or (IsGP ?l2 ?x rgripper) (IsAccessPointFor ?l2 ?x rgripper))
            (onleft ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2)
                  (increase (total-cost) 15)
  ))

  (:action moveto_12_rarm_right
     :parameters(?l1  - pose ?l2 - pose ?x)
     :precondition (and (RobotAt ?l1)
            (or (IsGP ?l2 ?x rgripper) (IsAccessPointFor ?l2 ?x rgripper))
            (onright ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2)
                  (increase (total-cost) 10)
  ))

 (:action grasp
     :parameters(?o1 - movable ?l1 - location ?l2 - pose  ?gripper - manip)
     :precondition(and  (At  ?o1 ?l1) (Object ?o1)
     		       (RobotAt ?l2) (IsGP ?l2 ?o1 ?gripper)
		       (empty ?gripper)
		       )
     :effect (and (InGripper ?o1 ?gripper) (not (At ?o1 ?l1)) (not (empty ?gripper))
 	      )
  )

  (:action handoff_l_r
          :parameters (?o1 - movable)
          :precondition (and (ingripper ?o1 lgripper)
                             (empty rgripper) (object ?o1))
          :effect (and (not (ingripper ?o1 lgripper))
                       (ingripper ?o1 rgripper)
                       (empty lgripper)
                       (not (empty rgripper)))
   )

   (:action handoff_r_l
          :parameters (?o1 - movable)
          :precondition (and (ingripper ?o1 rgripper)
                             (empty lgripper) (object ?o1))
          :effect (and (not (ingripper ?o1 rgripper))
                       (ingripper ?o1 lgripper)
                       (empty rgripper)
                       (not (empty lgripper)))

 )
)
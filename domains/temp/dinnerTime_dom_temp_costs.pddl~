(define (domain robotics)
  (:requirements :strips :equality  :typing)
  (:types location movable manip)
  (:predicates
	   (Location ?loc - location)
	   (At ?obj - movable ?loc - location)
           (RobotAt ?loc - location)
	   (InGripper ?obj - movable ?gripper - manip)
	   (IsAccessPointFor ?loc - location ?targetLocation)
	   (Object ?obj - movable )
	   (OnTray ?obj - movable )
	   (IsTray ?tray - movable )
	   (IsAccessPointForTray ?loc - location ?tray)
	   (Topmost ?obj - movable  ?tray - movable )
	   (nHeavy ?tray - movable )
	   (Smaller ?obj1 - movable  ?obj2 - movable )
	   (On ?obj1 - movable  ?obj2 - movable )
	   (TempArea ?loc - location)
	   (TrayLocation ?loc - location)
	   (empty ?gripper)
	   (InRoom1 ?loc - location)
	   (InRoom2 ?loc - location)
	   (isgp ?loc - location ?obj - movable ?gripper - manip)
  )
  
;(:functions (total-cost) - number)

 (:action placeOnTray
   :parameters(?lrobot ?obj1 ?obj2 ?tray ?trayloc ?gripper)
   :precondition(and (Location ?lrobot) (Object ?obj1) (Object ?obj2)
   		     (RobotAt ?lrobot) (IsTray ?tray) 
		     (At ?tray ?trayloc)
   		     (IsAccessPointFor ?lrobot ?trayloc) (InGripper ?obj1 ?gripper) 
		     (Topmost ?obj2 ?tray) 
		     (smaller ?obj1 ?obj2)
		     )
   :effect(and (not (InGripper ?obj1 ?gripper)) (OnTray ?obj1) (on ?obj1 ?obj2)
   	       (not (Topmost ?obj2 ?tray)) (Topmost ?obj1 ?tray) 
	       (empty ?gripper) 
)
 )	      

 (:action pickTray
  :parameters(?lrobot ?tray ?trayloc)
  :precondition(and (RobotAt ?lrobot) (IsTray ?tray)
  		    (forall (?gripper - manip)  (empty ?gripper))
		    (IsAccessPointFor ?lrobot ?trayloc)
		    (At ?tray ?trayloc)
		    (nHeavy ?tray))
  :effect(and (InGripper ?tray) (not (At ?tray ?trayloc))
  	      (not (empty gripper))
	      (forall (?gripper - manip)  (InGripper ?tray ?gripper))
	 )
 )

 (:action pickFromTray
  :parameters(?lrobot ?tray ?obj ?obj2 ?trayloc ?gripper)
  :precondition(and (Location ?lrobot) (IsTray ?tray) (Object ?obj)
  		  (RobotAt ?lrobot) (isgp ?lrobot ?obj ?gripper)
		  (At ?tray ?trayloc)
		  (Topmost ?obj ?tray) (on ?obj ?obj2)
		  (empty ?gripper)
		  )
  :effect(and (InGripper ?obj ?gripper) (nHeavy ?tray) (not (ontray ?obj))
  	      (not (Topmost ?obj ?tray)) (not (on ?obj ?obj2))
	      (topmost ?obj2 ?tray) (not (empty ?gripper))
	      )
)

 (:action putDownTray
  :parameters(?lrobot ?tray ?ltarget)
  :precondition (and (IsTray ?tray) (Location ?lrobot)
  		     (forall (?gripper - manip) (InGripper ?tray ?gripper)) (TrayLocation ?ltarget)
		     (RobotAt ?lrobot) (IsAccessPointFor ?lrobot ?ltarget) 
		     
		     )
  :effect (and (forall (?gripper - manip) (not (InGripper ?tray ?gripper))) (At ?tray ?ltarget) 
  	       (forall (?gripper - manip) (empty ?gripper) )
)
 )


 (:action putDown
  :parameters(?o1 ?l1 ?l2 ?gripper)
  :precondition (and (Object ?o1) (Location ?l1) (Location ?l2) 
  		     (InGripper ?o1 ?gripper) (RobotAt  ?l2) (TempArea ?l1)
		     (IsAccessPointFor ?l2 ?l1))
  :effect (and (not (InGripper ?o1 ?gripper)) (At ?o1 ?l1) (empty ?gripper)
			  )
			  
 )

  (:action moveto_1
     :parameters(?l1 ?l2)
     :precondition (and (Location ?l1) (Location ?l2) (RobotAt ?l1)
     		   	(InRoom1 ?l1) (InRoom1 ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2) 
  ))

  (:action moveto_2
     :parameters(?l1 ?l2)
     :precondition (and (Location ?l1) (Location ?l2) (RobotAt ?l1)
     		   	(InRoom2 ?l1) (InRoom2 ?l2)
     		   	)
     :effect (and (not (RobotAt ?l1)) (RobotAt ?l2) 
  ))

   (:action moveto_12
      :parameters(?l1 ?l2)
      :precondition (and (Location ?l1) (Location ?l2) (RobotAt ?l1)
      		   	(InRoom1 ?l1) (InRoom2 ?l2)
      		   	)
      :effect (and (not (RobotAt ?l1)) (RobotAt ?l2)
;      	      (increase (total-cost) 10)
      	     	  )
   )

     (:action moveToAcrossRoomsTray
        :parameters(?l1 ?l2 ?o)
        :precondition (and (Location ?l1) (Location ?l2) (RobotAt ?l1)
        		   	(Ingripper ?o) 
     				(Istray ?o)
        		   	)
        :effect (and (not (RobotAt ?l1)) (RobotAt ?l2)
;		(increase (total-cost) 10)
        )
     )

 (:action grasp
     :parameters(?o1 ?l1 ?l2 ?gripper)
     :precondition(and (Object ?o1) (Location ?l1) (Location ?l2) (At  ?o1 ?l1) 
     		       (RobotAt ?l2) (IsGP ?l2 ?o1 ?gripper)
		       (empty ?gripper)
		       )
     :effect (and (InGripper ?o1) (not (At ?o1 ?l1)) (not (empty ?gripper))
)
 )
)
